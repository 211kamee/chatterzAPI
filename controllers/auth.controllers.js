import User from "../models/user.models.js";

export const isAlphaNumeric = (str) => {
	var code, i, len;

	for (i = 0, len = str.length; i < len; i++) {
		code = str.charCodeAt(i);
		if (
			!(code > 47 && code < 58) && // numeric (0-9)
			!(code > 64 && code < 91) && // upper alpha (A-Z)
			!(code > 96 && code < 123) // lower alpha (a-z)
		)
			return false;
	}
	return true;
};
export const login = async (req, res) => {
	try {
		const { username, password } = req.body;
		if (!username || !password) {
			return res
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.status(400)
				.json("Username and Password required!");
		}

		const registeredUser = await User.findOne({ username }).select(
			"username password"
		);

		const passwordMatch =
			(await registeredUser?.passwordMatch(password)) || false;

		if (!registeredUser || !passwordMatch) {
			return res
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.status(400)
				.json(
					"Invaild username or password. Register or Try forgot password if available!"
				);
		}

		// Set the token (generated by JWT in user.models.js) in cookie
		const user = await User.findOne({ username }).select("-password");
		const token = await registeredUser.tokenGenerator();

		return res
			.cookie("token", token, {
				maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
				httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
				secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
				sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
				partitioned: true,
			})
			.status(200)
			.json({ user });
	} catch (error) {
		res.status(500).json(error.message);
	}
};

export const logout = (req, res) => {
	try {
		res.clearCookie("token");
		return res.status(200).json("Logged out!");
	} catch (error) {
		res.status(500).json(error.message);
	}
};

export const signup = async (req, res) => {
	try {
		const { username, email, password, confirmPassword } = req.body;

		if (!username || !email || !password || !confirmPassword) {
			return res
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.status(400)
				.json("All fields are required!");
		}
		if (username.length < 4 || username.length > 20) {
			return res
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.status(400)
				.json("Username must be at least 4 to 20 characters long!");
		}
		if (!isAlphaNumeric(username)) {
			return res
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.status(400)
				.json("Only alphabet and numbers are allowed!");
		}
		if (
			!String(email).match(
				/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
			)
		) {
			return res
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.status(400)
				.json("Not a valid email address!");
		}
		if (password.length < 8 || password.length > 20) {
			return res
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.status(400)
				.json("Password must be at least 8 to 20 characters long!");
		}
		if (password !== confirmPassword) {
			return res
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.status(400)
				.json("Passwords do not match");
		}
		if (password.includes(" ") || username.includes(" ")) {
			return res
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.status(400)
				.json("Username and password must not contain spaces!");
		}

		if (await User.findOne({ username })) {
			return res
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.status(400)
				.json("Username already taken!");
		}
		if (await User.findOne({ email })) {
			return res
				.cookie("token", "", {
					maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
					httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
					secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
					sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
					partitioned: true,
				})
				.status(400)
				.json("Email already used try forgot password!");
		}

		// Upload to database
		await User.create({
			username,
			password,
			email,
		});

		const user = await User.findOne({ username }).select("-password");

		// Set the token (generated by JWT in user.models.js) in cookie
		const token = user.tokenGenerator();

		return res
			.cookie("token", token, {
				maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
				httpOnly: true, // Prevents client-side JavaScript from accessing the cookie, reducing the risk of XSS attacks
				secure: true, // When true, the cookie is only sent over HTTPS; if false, it can be sent over HTTP as well.
				sameSite: "None", // Prevent cross-site request forgery attacks or CRSF attacks
				partitioned: true,
			})
			.status(200)
			.json({ user });
	} catch (error) {
		res.status(500).json(error.message);
	}
};
