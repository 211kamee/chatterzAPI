import User from "../models/user.models.js";
import { isAlphaNumeric, cookiesOptions } from "../constants.js";

export const login = async (req, res) => {
	try {
		const { username, password } = req.body;
		if (!username || !password) {
			return res
				.clearCookie("token", cookiesOptions)
				.status(400)
				.json("Username and Password required!");
		}

		const registeredUser = await User.findOne({ username }).select(
			"username password"
		);

		const passwordMatch =
			(await registeredUser?.passwordMatch(password)) || false;

		if (!registeredUser || !passwordMatch) {
			return res
				.clearCookie("token", cookiesOptions)
				.clearCookie("token", cookiesOptions)
				.status(400)
				.json(
					"Invaild username or password. Register or Try forgot password if available!"
				);
		}

		// Set the token (generated by JWT in user.models.js) in cookie
		const user = await User.findOne({ username }).select("-password");
		const token = await registeredUser.tokenGenerator();

		return res
			.cookie("token", token, cookiesOptions)
			.status(200)
			.json({ user });
	} catch (error) {
		res.status(500).json(error.message);
	}
};

export const logout = (req, res) => {
	return res
		.clearCookie("token", cookiesOptions)	
		.status(200)
		.json("Logged out!");
};

export const signup = async (req, res) => {
	try {
		const { username, email, password, confirmPassword } = req.body;

		if (!username || !email || !password || !confirmPassword) {
			return res
				.clearCookie("token", cookiesOptions)
				.status(400)
				.json("All fields are required!");
		}
		if (username.length < 4 || username.length > 20) {
			return res
				.clearCookie("token", cookiesOptions)
				.status(400)
				.json("Username must be at least 4 to 20 characters long!");
		}
		if (!isAlphaNumeric(username)) {
			return res
				.clearCookie("token", cookiesOptions)
				.status(400)
				.json("Only alphabet and numbers are allowed!");
		}
		if (
			!String(email).match(
				/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
			)
		) {
			return res
				.clearCookie("token", cookiesOptions)
				.status(400)
				.json("Not a valid email address!");
		}
		if (password.length < 8 || password.length > 20) {
			return res
				.clearCookie("token", cookiesOptions)
				.status(400)
				.json("Password must be at least 8 to 20 characters long!");
		}
		if (password !== confirmPassword) {
			return res
				.clearCookie("token", cookiesOptions)
				.status(400)
				.json("Passwords do not match");
		}
		if (password.includes(" ") || username.includes(" ")) {
			return res
				.clearCookie("token", cookiesOptions)
				.status(400)
				.json("Username and password must not contain spaces!");
		}

		if (await User.findOne({ username })) {
			return res
				.clearCookie("token", cookiesOptions)
				.status(400)
				.json("Username already taken!");
		}
		if (await User.findOne({ email })) {
			return res
				.clearCookie("token", cookiesOptions)
				.status(400)
				.json("Email already used try forgot password!");
		}

		// Upload to database
		await User.create({
			username,
			password,
			email,
		});

		const user = await User.findOne({ username }).select("-password");

		// Set the token (generated by JWT in user.models.js) in cookie
		const token = await user.tokenGenerator();

		return res
			.cookie("token", token, cookiesOptions)
			.status(200)
			.json({ user });
	} catch (error) {
		res.status(500).json(error.message);
	}
};
